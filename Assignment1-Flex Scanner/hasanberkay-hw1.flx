%{
    int lineCounter = 1;
%}

%%

[\n] lineCounter++;

[ \t\r]

"\"Get\""   printf("%d tGET\n", lineCounter);
"\"Set\""   printf("%d tSET\n", lineCounter);
"\"Function\""  printf("%d tFUNCTION\n", lineCounter);
"\"Print\"" printf("%d tPRINT\n", lineCounter);
"\"For\""   printf("%d tFOR\n", lineCounter);
"\"If\""    printf("%d tIF\n", lineCounter);
"\"Return\""    printf("%d tRETURN\n", lineCounter);

"," printf("%d tCOMMA\n", lineCounter);
"\"+\"" printf("%d tPLUS\n", lineCounter);
"\"*\"" printf("%d tMUL\n", lineCounter);
"\"++\"" printf("%d tINC\n", lineCounter);
"[" printf("%d tLBRAC\n", lineCounter);
"\">\"" printf("%d tGT\n", lineCounter);
"\">=\"" printf("%d tGEQ\n", lineCounter);
"\"==\"" printf("%d tEQUALITY\n", lineCounter);
"\"-\"" printf("%d tMINUS\n", lineCounter);
"\"/\"" printf("%d tDIV\n", lineCounter);
"\"--\"" printf("%d tDEC\n", lineCounter);
"]" printf("%d tRBRAC\n", lineCounter);
"\"<\"" printf("%d tLT\n", lineCounter);
"\"<=\"" printf("%d tLEQ\n", lineCounter);

["][_a-zA-Z][_a-zA-Z0-9]*["] {
    char* intVal = malloc( (yyleng - 2)  * sizeof(char) );

    int i = 0;
    for(; i < yyleng - 2; i++){
        intVal[i] = yytext[i + 1];
    }

    printf("%d tIDENT (%s)\n", lineCounter, intVal);

} 

[-]?[0-9]+ {
    char* intVal = malloc( yyleng  * sizeof(char) );
    int i = 0;

    int yyidx = 0;
    int idx = 0;

    if(yytext[0] == '-'){
        intVal[0] = yytext[0];
        yyidx++;
        idx++;
    }

    while(yyidx < yyleng && yytext[yyidx] == '0'){
        yyidx++;
    }

    if(yyidx == yyleng){
        intVal[idx] = '0';
    }

    else{
        for(; yyidx < yyleng; idx++, yyidx++){
            intVal[idx] = yytext[yyidx];
        }
    }

    printf("%d tNUM (%s) (%s)\n", lineCounter, yytext, intVal); 
}


[-]?[0-9]+[.][0-9]+ {
    char* intVal = malloc( yyleng  * sizeof(char) );
    int i = 0;

    int yyidx = 0;
    int idx = 0;

    if(yytext[0] == '-'){
        intVal[0] = yytext[0];
        yyidx++;
        idx++;
    }
    
    int dotPos = yyidx;
    while(yytext[dotPos] != '.'){
        dotPos++;
    }

    while(yyidx < dotPos && yytext[yyidx] == '0'){
        yyidx++;
    }

    if(yyidx == dotPos){
        intVal[idx++] = '0';
        intVal[idx++] = '.';
        yyidx++;
    }

    else{
        for(; yyidx <= dotPos; idx++, yyidx++){
            intVal[idx] = yytext[yyidx];
        }
    }

    i = yyleng - 1;
    while(i > dotPos && yytext[i] == '0'){
        i--;
    }

    if(i == dotPos){
        intVal[idx] = '0';
    }

    else{
        for(; yyidx <= i; idx++, yyidx++){
            intVal[idx] = yytext[yyidx];
        }
    }

    printf("%d tNUM (%s) (%s)\n", lineCounter, yytext, intVal); 

}

'[^']*' {
    char* intVal = malloc( (yyleng - 2)  * sizeof(char) );
    int prevLineCounter = lineCounter;

    int i = 1;
    for(; i < yyleng - 1; i++){
        intVal[i - 1] = yytext[i];
        if(yytext[i] == '\n'){
            lineCounter++;
        }
    }

    printf("%d tSTRING (%s)\n", prevLineCounter, intVal);

}

. printf("%d ILLEGAL CHARACTER (%s)\n", lineCounter, yytext);

%%

int main(){
    yylex();
    return(0);
}